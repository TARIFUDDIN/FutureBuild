// Updated Prisma schema - Removed email automation and resume generation
// Keep only job scraping and basic application tracking

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?   // Keep this simple without foreign key
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio           String?
  experience    Int?
  skills        String[]

  // Keep existing non-automation relations
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
  resumeAnalyses ResumeAnalysis[]
  jobSpecificAnalyses JobSpecificAnalysis[]
  roadmaps      Roadmap[]
  JobSearch     JobSearch[]
  JobPortalClick JobPortalClick[]

  // SIMPLIFIED Job Automation Relations (removed email/resume automation)
  jobSearchSessions   JobSearchSession[]
  jobApplications     JobApplication[]  // Keep basic application tracking
}

// Keep existing models (Assessment, Resume, CoverLetter, etc.) unchanged
model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float
  questions     Json[]
  category      String
  improvementTip String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String
  jobDescription  String?
  companyName     String
  jobTitle        String
  status          String    @default("draft")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique
  salaryRanges  Json[]
  growthRate    Float
  demandLevel   String
  topSkills     String[]
  marketOutlook String
  keyTrends     String[]
  recommendedSkills String[]
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime

  @@index([industry])
}

model ResumeAnalysis {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  atsScore           Float
  missingKeywords    String[]
  structureIssues    String[]
  contentSuggestions String[]
  actionItems        String[]
  jobTitle           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([userId])
}

model JobSpecificAnalysis {
  id                      String    @id @default(cuid())
  userId                  String
  user                    User      @relation(fields: [userId], references: [id])
  jobDescription          String    @db.Text
  jobTitle                String
  companyName             String
  overallScore            Float
  skillsMatch             Float
  experienceMatch         Float
  educationMatch          Float?
  keywordOptimization     Float?
  requiredSkillsFound     String[]
  requiredSkillsMissing   String[]
  preferredSkillsFound    String[]
  preferredSkillsMissing  String[]
  additionalSkills        String[]
  experienceAlignment     Boolean
  candidateExperience     String?
  requiredExperience      String?
  relevantExperience      String[]
  experienceGaps          String[]
  strengthsForRole        String[]
  weaknessesForRole       String[]
  competitiveAdvantage    String[]
  redFlags                String[]
  recommendedImprovements String[]
  missingSkills           String[]
  interviewPreparation    String[]
  overallAssessment       String    @db.Text
  hiringRecommendation    String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([userId])
  @@index([jobTitle])
  @@index([companyName])
}

model Roadmap {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  skillPath   String
  mermaidCode String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model JobSearch {
  id             String   @id @default(cuid())
  userId         String
  jobTitle       String
  location       String?
  experienceLevel String?
  salaryRange    String?
  jobType        String?
  portals        String[]
  createdAt      DateTime @default(now())

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model JobPortalClick {
  id             String   @id @default(cuid())
  userId         String?
  portalId       String
  jobTitle       String
  location       String?
  createdAt      DateTime @default(now())

  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([portalId])
}

// ====================================
// SIMPLIFIED JOB AUTOMATION MODELS
// ====================================

// Keep job search sessions for organizing searches
model JobSearchSession {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  sessionName   String?
  searchQuery   String    @db.Text
  jobTitle      String
  location      String?
  experience    String?
  skills        String[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  jobs          ScrapedJob[]
  applications  JobApplication[]

  @@index([userId])
}

// Keep scraped jobs but remove complex AI features
model ScrapedJob {
  id                    String    @id @default(cuid())
  sessionId             String
  session               JobSearchSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // Basic Job Details
  externalJobId         String
  title                 String
  company               String
  location              String?
  salaryInfo            String?
  postedAt              String?
  descriptionText       String?   @db.Text
  applyUrl              String?
  source                String?
  remote                Boolean   @default(false)
  
  // Basic matching
  aiMatchScore          Float?
  keySkillsMatch        String[]
  
  // Simple status tracking
  status                JobStatus @default(DISCOVERED)
  priority              JobPriority @default(MEDIUM)
  notes                 String?   @db.Text
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Basic application tracking
  applications          JobApplication[]

  @@index([sessionId])
  @@index([company])
  @@index([status])
  @@unique([externalJobId, sessionId])
}

// SIMPLIFIED Job Applications - just basic tracking
model JobApplication {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  sessionId         String
  session           JobSearchSession @relation(fields: [sessionId], references: [id])
  jobId             String
  job               ScrapedJob @relation(fields: [jobId], references: [id])
  
  // Basic Application Details
  status            ApplicationStatus @default(PENDING)
  appliedAt         DateTime?
  applicationUrl    String?   // Direct application link
  referenceNumber   String?   // Company's reference number
  notes             String?   @db.Text
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([status])
}

// ====================================
// SIMPLIFIED ENUMS
// ====================================

enum JobStatus {
  DISCOVERED
  VIEWED
  APPLIED
  REJECTED
  ARCHIVED
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
}

enum ApplicationStatus {
  PENDING
  APPLIED
  REJECTED
  ARCHIVED
}